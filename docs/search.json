[
  {
    "objectID": "Control Flow and Writing Functions.html",
    "href": "Control Flow and Writing Functions.html",
    "title": "Control Flow and Function Writing",
    "section": "",
    "text": "For Homework 3, we will be continuing the example in our last homework assignment. This file hw2_list.rda is located in the working directory and is loaded in to work with in this assignment.\n\nload(\"hw2_list.rda\")\n\n\nTask 1: Control Flow Practice\n\nSuppose we want to characterize the post-treatment (or placebo) blood pressure measurement as optimal (≤ 120), borderline (120 &lt; bp ≤ 130), and high (&gt; 130).\n\nFirst, create a new column in each data frame from above called status. You can do this via\nyour_df$status &lt;- character(20) #or 10 depending on number of observations\nNote: You want to do this additional column to the data frames that are stored in your list not the original data frames you had in your environment. Although R uses smart ways to avoid using excess memory, it doesn’t overwrite the data frame stored in your list if you modify the original object.\n\nbp_list$treatment$status &lt;- character(20)\nbp_list$placebo$status &lt;- character(10)\n\n\nFor the non-placebo data frame (within the list), create a for loop and use if/then/else logic to create the status column’s values.\n\nTo create the status column’s value for each subject I created a for loop that loops through the sequence from 1 to the number of rows (or through all the subjects). In this loop, I used if/then/else logic to examine the subject’s post-treatment blood pressure and if a certain condition is met, the subject’s status column is assigned an appropriate value. If the condition is not met, it proceeds to check the next condition until it reaches the last else statement.\n\nfor (i in seq_len(nrow(bp_list$treatment))){\n  if(bp_list$treatment$post_bp[i] &gt; 130){\n      bp_list$treatment$status[i] &lt;- \"high\"\n  } else if (bp_list$treatment$post_bp[i]){\n      bp_list$treatment$status[i] &lt;- \"borderline\"\n  } else if (bp_list$treatment$post_bp[i]){\n      bp_list$treatment$status[i] &lt;- \"optimal\"\n  } else {\n      bp_list$treatment$status[i] &lt;- \"Error\"\n  }\n}\n\n\nRepeat for the placebo data frame (within the list).\n\n\nfor (i in seq_len(nrow(bp_list$placebo))){\n  if(bp_list$placebo$post_bp[i] &gt; 130){\n      bp_list$placebo$status[i] &lt;- \"high\"\n  } else if (bp_list$placebo$post_bp[i]){\n      bp_list$placebo$status[i] &lt;- \"borderline\"\n  } else if (bp_list$placebo$post_bp[i]){\n      bp_list$placebo$status[i] &lt;- \"optimal\"\n  } else {\n      bp_list$placebo$status[i] &lt;- \"Error\"\n  }\n}\n\n\n\nTask 2: Function Writing\nContinue the previous example. Suppose you would eventually have many data sets in the form of the two above. You want to write a function to do some things for you quickly.\n\nWrite a function that\n\n• takes in a list with two data frames in it (a treatment and a placebo data frame) as an argument. Give no default value.\n• takes in an R function (that would find a summary of a numeric column) with the default value being set to “mean” (notice this is a quoted string).\n• Finds the statistic of interest (as defined by the user input) for the pre, post, and diff columns of both data frames.\n– Use my_fun &lt;- get(stat) within the function to get the function from the quoted string.\n• These six values should then be returned as a named list with meaningful names - this is a somewhat challenging part!\n– I’m going to let you consider what to do but you might create a vector of names that is created dynamically based on the statistic passed, create a vector with the actual statistic values, and then assign names() to your vector. Then return that (an atomic vector (our standard 1D vector) with names can be returned instead of a list).\n\nsummarizer &lt;- function(list, r_function = \"mean\") {\n  # Check if the list input is valid\n  if(!is.list(list) | !length(2)){\n    stop(\"Not a list of length 2!\")\n  }\n  \n  # Extract important information from input\n  treatment &lt;- list[[1]]\n  placebo &lt;- list[[2]]\n  my_fun &lt;- get(r_function)\n  \n  # Calculate the actual statistic values\n  pre_trt &lt;- my_fun(treatment$pre_bp)\n  post_trt &lt;- my_fun(treatment$post_bp)\n  diff_trt &lt;- my_fun(treatment$diff_bp)\n  pre_placebo &lt;- my_fun(placebo$pre_bp)\n  post_placebo &lt;- my_fun(placebo$post_bp)\n  diff_placebo &lt;- my_fun(placebo$diff_bp)\n  \n  # Create the end list of statistic values\n  end_list &lt;- list(pre_trt = pre_trt, post_trt = post_trt, \n              diff_trt = diff_trt, pre_placebo = pre_placebo,\n              post_placebo = post_placebo, \n              diff_placebo = diff_placebo)\n  \n  # Dynamically create names for the named list based on the function that was specified\n  pre_trt_summary &lt;- paste(\"pre_trt\", r_function, sep = \"_\")\n  post_trt_summary &lt;- paste(\"post_trt\", r_function, sep =\"_\")\n  diff_trt_summary &lt;- paste(\"diff_trt\", r_function, sep = \"_\")\n  pre_placebo_summary &lt;- paste(\"pre_placebo\", r_function, sep =\"_\")\n  post_placebo_summary &lt;- paste(\"post_placebo\", r_function, sep = \"_\")\n  diff_placebo_summary &lt;- paste(\"diff_placebo\", r_function, sep = \"_\")\n  \n  # Assign the end list the dynamic names\n  names(end_list)[1] &lt;- pre_trt_summary\n  names(end_list)[2] &lt;- post_trt_summary\n  names(end_list)[3] &lt;- diff_trt_summary\n  names(end_list)[4] &lt;- pre_placebo_summary\n  names(end_list)[5] &lt;- post_placebo_summary\n  names(end_list)[6] &lt;- diff_placebo_summary\n  \n  # Return the end list with the dynamic names\n  return(end_list)\n  \n}\n\n• Finally, apply your function to you list of data frames from previous. Use it without specifying your statistic, with specifying your statistic as “var”, “sd”, “min”, and “max”.\nApply the function wihtout specifying the statistic.\n\nsummarizer(bp_list)\n\n$pre_trt_mean\n[1] 131.6\n\n$post_trt_mean\n[1] 125.95\n\n$diff_trt_mean\n[1] 5.65\n\n$pre_placebo_mean\n[1] 131.9\n\n$post_placebo_mean\n[1] 128.9\n\n$diff_placebo_mean\n[1] 3\n\n\nApply the function with specifying your statistic as “var”, “sd”, “min”, and “max”.\n\nsummarizer(bp_list, \"var\")\n\n$pre_trt_var\n[1] 75.72632\n\n$post_trt_var\n[1] 78.99737\n\n$diff_trt_var\n[1] 117.8184\n\n$pre_placebo_var\n[1] 149.8778\n\n$post_placebo_var\n[1] 124.9889\n\n$diff_placebo_var\n[1] 341.3333\n\nsummarizer(bp_list, \"sd\")\n\n$pre_trt_sd\n[1] 8.702087\n\n$post_trt_sd\n[1] 8.888046\n\n$diff_trt_sd\n[1] 10.85442\n\n$pre_placebo_sd\n[1] 12.24246\n\n$post_placebo_sd\n[1] 11.17984\n\n$diff_placebo_sd\n[1] 18.47521\n\nsummarizer(bp_list, \"min\")\n\n$pre_trt_min\n[1] 115\n\n$post_trt_min\n[1] 114\n\n$diff_trt_min\n[1] -24\n\n$pre_placebo_min\n[1] 114\n\n$post_placebo_min\n[1] 105\n\n$diff_placebo_min\n[1] -21\n\nsummarizer(bp_list, \"max\")\n\n$pre_trt_max\n[1] 151\n\n$post_trt_max\n[1] 146\n\n$diff_trt_max\n[1] 21\n\n$pre_placebo_max\n[1] 152\n\n$post_placebo_max\n[1] 143\n\n$diff_placebo_max\n[1] 33"
  }
]